// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(uuid())
  username               String        @unique
  email                  String        @unique
  password_hash          String
  description            String?
  iconUrl                String?
  created_at             DateTime      @default(now())
  diaryEntries           DiaryEntry[]
  sentFriendRequests     Friendship[]  @relation("sentRequests")
  receivedFriendRequests Friendship[]  @relation("receivedRequests")
}

model DiaryEntry {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  imageUrl     String?
  latitude     Float
  longitude    Float
  takenAt      DateTime
  createdAt    DateTime     @default(now())
  privacyLevel PrivacyLevel @default(PRIVATE)
  // New fields for category
  categoryId   String?
  category     Category?    @relation(fields: [categoryId], references: [id])

  @@index([categoryId]) // Add index for categoryId
}

model Category {
  id           String       @id @default(uuid())
  name         String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  diaryEntries DiaryEntry[]
}

model Friendship {
  id          String           @id @default(uuid())
  requesterId String
  addresseeId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester User @relation("sentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("receivedRequests", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
}

// Enum for privacy level
enum PrivacyLevel {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

// Enum for friendship status
enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String        @id @default(uuid())
  username                 String        @unique
  email                    String        @unique
  password_hash            String
  description              String?
  iconUrl                  String?
  created_at               DateTime      @default(now())
  diaryEntries             DiaryEntry[]
  sentFriendRequests       Friendship[]  @relation("sentRequests")
  receivedFriendRequests   Friendship[]  @relation("receivedRequests")
  likes                    Like[]
  hidingEntries            HiddenEntry[] @relation("hidingUser")
  hidingUsers              HiddenUser[]  @relation("hidingUserRelation")
  hiddenByUsers            HiddenUser[]  @relation("hiddenUserRelation")
}

model DiaryEntry {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  imageUrl     String?
  latitude     Float
  longitude    Float
  takenAt      DateTime
  createdAt    DateTime     @default(now())
  privacyLevel PrivacyLevel @default(PRIVATE)
  // New fields for category
  categoryId   String?
  category     Category?    @relation(fields: [categoryId], references: [id])
  likes        Like[]
  hiddenBy     HiddenEntry[]

  @@index([categoryId]) // Add index for categoryId
}

model Category {
  id           String       @id @default(uuid())
  name         String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  diaryEntries DiaryEntry[]
}

model Friendship {
  id          String           @id @default(uuid())
  requesterId String
  addresseeId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester User @relation("sentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("receivedRequests", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
}

// Enum for privacy level
enum PrivacyLevel {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

// Enum for friendship status
enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Like {
  id           String     @id @default(uuid())
  userId       String
  diaryEntryId String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  diaryEntry DiaryEntry @relation(fields: [diaryEntryId], references: [id], onDelete: Cascade)

  @@unique([userId, diaryEntryId]) // ユーザーが同じ投稿に複数回いいねできないようにする
  @@index([userId])
  @@index([diaryEntryId])
}

model HiddenEntry {
  id        String   @id @default(uuid())
  userId    String // ユーザー
  entryId   String // 日記
  createdAt DateTime @default(now())

  user  User @relation("hidingUser", fields: [userId], references: [id], onDelete: Cascade)
  entry DiaryEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@unique([userId, entryId])
  @@index([userId])
  @@index([entryId])
}

model HiddenUser {
  id           String   @id @default(uuid())
  userId       String // 非表示にしたユーザー
  hiddenUserId String // 非表示にされたユーザー
  createdAt    DateTime @default(now())

  user       User @relation("hidingUserRelation", fields: [userId], references: [id], onDelete: Cascade)
  hiddenUser User @relation("hiddenUserRelation", fields: [hiddenUserId], references: [id], onDelete: Cascade)

  @@unique([userId, hiddenUserId])
  @@index([userId])
  @@index([hiddenUserId])
}
